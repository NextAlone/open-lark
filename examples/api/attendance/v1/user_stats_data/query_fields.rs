#![allow(clippy::field_reassign_with_default)]

use dotenvy::dotenv;
use open_lark::{prelude::LarkClient, service::attendance::v1::models::QueryStatsFieldsRequest};
use std::env;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    dotenv().ok();

    let app_id = env::var("APP_ID").expect("APP_ID must be set");
    let app_secret = env::var("APP_SECRET").expect("APP_SECRET must be set");

    let client = LarkClient::builder(&app_id, &app_secret).build();

    // цЮДх╗║цЯешпвч╗Яшобшбихд┤шп╖ц▒В
    let mut req = QueryStatsFieldsRequest::default();
    req.employee_type = "employee_id".to_string();
    req.locale = Some("zh-CN".to_string()); // ф╕нцЦЗ

    println!("хПСщАБцЯешпвч╗Яшобшбихд┤шп╖ц▒В...");
    println!("шпншиА: ф╕нцЦЗ (zh-CN)");

    match client
        .attendance
        .v1
        .user_stats_data
        .query_fields(req, None)
        .await
    {
        Ok(resp) => {
            println!("тЬЕ цЯешпвч╗Яшобшбихд┤цИРхКЯ!");
            if let Some(data) = resp.data {
                println!("ЁЯУК хПпчФич╗ЯшобхнЧцо╡ (хЕ▒{}ф╕к):", data.fields.len());

                for (index, field) in data.fields.iter().enumerate() {
                    println!("  {}. ЁЯУИ хнЧцо╡ф┐бцБп:", index + 1);
                    println!("     хнЧцо╡цаЗшпЖ: {}", field.field_key);
                    println!("     хнЧцо╡хРНчз░: {}", field.field_name);

                    if let Some(zh_name) = &field.field_name_zh {
                        println!("     ф╕нцЦЗхРНчз░: {}", zh_name);
                    }
                    if let Some(en_name) = &field.field_name_en {
                        println!("     шЛ▒цЦЗхРНчз░: {}", en_name);
                    }
                    if let Some(ja_name) = &field.field_name_ja {
                        println!("     цЧецЦЗхРНчз░: {}", ja_name);
                    }

                    let field_type_name = match field.field_type {
                        0 => "цЦЗцЬм",
                        1 => "цХ░хнЧ",
                        2 => "цЧ╢щЧ┤",
                        _ => "цЬкчЯе",
                    };
                    println!("     хнЧцо╡ч▒╗хЮЛ: {} ({})", field.field_type, field_type_name);
                    println!("     ---");
                }

                println!("ЁЯТб цПРчд║: ф╜ахПпф╗еф╜┐чФиш┐Щф║ЫхнЧцо╡цаЗшпЖхЬич╗Яшобшо╛ч╜оф╕нцМЗхоЪщЬАшжБцЯешпвчЪДхнЧцо╡");
            }
        }
        Err(e) => {
            eprintln!("тЭМ цЯешпвч╗Яшобшбихд┤хд▒ш┤е: {:?}", e);
            eprintln!("ЁЯТб цПРчд║: шп╖цгАцЯехСШх╖еIDч▒╗хЮЛхТМшпншиАшо╛ч╜оцШпхРжцнгчбо");
        }
    }

    Ok(())
}
